{"version":3,"file":"static/js/778.dfac7707.chunk.js","mappings":"yMAGaA,EAAY,SAACC,GACtB,MAA6BA,EAAMC,SAA3BA,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAClB,OAAOD,EAASC,QAAO,SAACC,GAAD,OACrBA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cADtB,GAGxB,ECWQE,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,E,SClBpB,EAAyB,4B,kBCsEzB,EAhEoB,WAElB,IAAMG,GAAWC,EAAAA,EAAAA,MAEjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOf,EAAP,KAAagB,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KAsBMC,EAAe,SAACC,GACpB,MAAwBA,EAAEC,OAAlBrB,EAAR,EAAQA,KAAMsB,EAAd,EAAcA,MACD,SAATtB,EACFgB,EAAQM,GACU,WAATtB,GACTkB,EAAUI,EAEb,EAED,OACE,kBACMC,UAAWC,EACXC,SA/Ba,SAACL,GAEpB,GADAA,EAAEM,iBACkB,KAAhB1B,EAAK2B,OAAT,CAIA,IAAMC,EAAa,CACjBnB,GAAIN,IACJH,KAAMA,EACNiB,OAAQA,GAGVJ,GAASgB,EAAAA,EAAAA,IAAWD,IAEpBZ,EAAQ,IACRE,EAAU,GAXT,CAaF,EAYC,WAGE,qCACA,kBACEY,KAAK,OACL9B,KAAK,OACL+B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRX,MAAOtB,EACPkC,SAAUf,KAEZ,uCACA,kBACEW,KAAK,MACL9B,KAAK,SACL+B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRX,MAAOL,EACPiB,SAAUf,KAEZ,mBAAQW,KAAK,SAAb,2BAGL,ECrED,EAA4B,+BC6B5B,EAtBoB,WAClB,IAAMK,GAAmBC,EAAAA,EAAAA,IAAYzC,GAE/BkB,GAAWC,EAAAA,EAAAA,MAOjB,OACA,wBACGqB,EAAiBE,KAAI,SAACtC,GAAD,OACpB,0BACGA,EAAQC,KADX,KACmBD,EAAQkB,QACzB,mBAAQM,UAAWC,EAAec,QAAS,kBAT3BC,EAS8CxC,EAAQU,QAR1EI,GAAS2B,EAAAA,EAAAA,IAAcD,IADJ,IAACA,CAS2B,EAA3C,sBAFOxC,EAAQU,GADG,KAQzB,EC3BD,EAA4B,0BCoB5B,EAhBe,WACb,IAAMX,GAASsC,EAAAA,EAAAA,KAAY,SAACxC,GAAD,OAAWA,EAAMC,SAASC,MAA1B,IACrBe,GAAWC,EAAAA,EAAAA,MAMjB,OACA,iBAAKS,UAAWC,EAAhB,WACE,sDACA,kBAAOM,KAAK,OAAOR,MAAOxB,EAAQoC,SAPf,SAACd,GACpBP,EAASlB,EAAUyB,EAAEC,OAAOC,OAC7B,MAQF,ECwDD,EAhEiB,WAGf,IAAMzB,GAAWuC,EAAAA,EAAAA,KAAY,SAAAxC,GAAK,OAAIA,EAAMC,SAASA,QAAnB,IAC5BC,GAASsC,EAAAA,EAAAA,KAAY,SAAAxC,GAAK,OAAIA,EAAMC,SAASC,MAAnB,IAC1Be,GAAWC,EAAAA,EAAAA,OAEjB2B,EAAAA,EAAAA,YAAU,WACR5B,GAAS6B,EAAAA,EAAAA,MACV,GAAE,CAAC7B,IAGJ,IA8BMsB,GAAmBC,EAAAA,EAAAA,KAAY,SAACxC,GAAD,OAAWA,EAAMC,SAASsC,gBAA1B,IAKrC,OACE,4BACE,4BACE,uCACA,SAAC,EAAD,CAAaQ,aAvCM,SAAC3C,EAAMiB,GAC9B,GAAoB,KAAhBjB,EAAK2B,OACP,OAAOiB,MAAM,oBAKf,GAF2B/C,EAASgD,MAAK,SAAC9C,GAAD,OACzCA,EAAQC,KAAKC,gBAAkBD,EAAKC,aADK,IAGvC,OAAO2C,MAAM,IAAD,OAAK5C,EAAL,8BAGd,IAAM4B,EAAa,CACjBnB,GAAIN,IACJH,KAAMA,EACNiB,OAAQA,GAGVJ,GAASgB,EAAAA,EAAAA,IAAWD,GACrB,QAuBG,4BACE,sCACA,SAAC,EAAD,CAAQN,MAAOxB,EAAQoC,SAlBF,SAACY,GAC1BjC,EAASlB,EAAUmD,GACpB,KAiBK,SAAC,EAAD,CAAajD,SAAUsC,EAAkBY,gBAxBnB,SAACR,GAC3B1B,GAAS2B,EAAAA,EAAAA,IAAcD,GACxB,SA0BF,C","sources":["components/redux/phonebook/setFilter.js","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/contactForm/contactForm.module.css?5312","components/contactForm/contactForm.jsx","webpack://react-homework-template/./src/components/contactList/contactList.module.css?e2f8","components/contactList/contactList.jsx","webpack://react-homework-template/./src/components/filter/filter.module.css?56b3","components/filter/filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// export const { setFilter } = contactsSlise.actions\n\n\nexport const setFilter = (state) => {\n    const { contacts, filter } = state.contacts;\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"formEl\":\"contactForm_formEl__9cL+j\"};","import { useDispatch } from 'react-redux';\nimport { addContact } from 'components/redux/phonebook/operations';\nimport { nanoid } from 'nanoid';\n\nimport css from './contactForm.module.css'\nimport { useState } from 'react';\n\nconst ContactForm = () => {\n\n  const dispatch = useDispatch()\n\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (name.trim() === '') {\n      return;\n    }\n\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number\n    };\n\n    dispatch(addContact(newContact));\n\n    setName('');\n    setNumber('');\n\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name === 'name') {\n      setName(value)\n    } else if (name === 'number') {\n      setNumber(value)\n    }\n  };\n\n  return (\n    <form \n          className={css.formEl}\n          onSubmit={handleSubmit}>\n      <label>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleChange}\n      />\n      <label>Number</label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleChange}\n      />\n      <button type='submit'>Add contact</button>\n    </form>\n  );\n};\nexport default ContactForm\n","// extracted by mini-css-extract-plugin\nexport default {\"btnDelete\":\"contactList_btnDelete__AtZgl\"};","\nimport React from \"react\";\nimport css from \"./contactList.module.css\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setFilter } from \"components/redux/phonebook/setFilter\";\nimport { deleteContact } from \"components/redux/phonebook/operations\";\n\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(setFilter);\n\n  const dispatch = useDispatch()\n\n\n  const handleDelete = (contactId) => {\n    dispatch(deleteContact(contactId))\n  }\n\n  return(\n  <ul>\n    {filteredContacts.map((contact) => (\n      <li key={contact.id}>\n        {contact.name}: {contact.number}\n        <button className={css.btnDelete} onClick={() => handleDelete(contact.id)}>Delete</button>\n      </li>\n    ))}\n  </ul>\n  )\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterDiv\":\"filter_filterDiv__xdMQV\"};","import React from \"react\";\nimport css from './filter.module.css'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setFilter } from \"components/redux/phonebook/setFilter\";\n\nconst Filter = () => {\n  const filter = useSelector((state) => state.contacts.filter)\n  const dispatch = useDispatch()\n\n  const handleChange = (e) => {\n    dispatch(setFilter(e.target.value))\n  }\n\n  return(\n  <div className={css.filterDiv}>\n    <label>Find contacts by name</label>\n    <input type='text' value={filter} onChange={handleChange} />\n  </div>\n  )\n};\n\nexport default Filter;\n","import { useSelector, useDispatch} from 'react-redux'\nimport { addContact, deleteContact, fetchContacts } from './../../components/redux/phonebook/operations';\nimport { setFilter } from './../../components/redux/phonebook/setFilter'\n\n\nimport { nanoid } from \"nanoid\";\nimport ContactForm  from \"./../../components/contactForm/contactForm\";\nimport ContactList from \"./../../components/contactList/contactList\";\nimport Filter from \"./../../components/filter/filter\";\nimport { useEffect } from 'react';\n\nconst Contacts = () => {\n\n\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n  const handleAddContact = (name, number) => {\n    if (name.trim() === '') {\n      return alert('no text in input');\n    }\n\n    const isDuplicateContact = contacts.some((contact) => \n    contact.name.toLowerCase() === name.toLowerCase());\n    if (isDuplicateContact) {\n      return alert(`'${name}' is already in contacts.`);\n    }\n\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    dispatch(addContact(newContact))\n  };\n\n  const handleDeleteContact = (contactId) => {\n    dispatch(deleteContact(contactId))\n  };\n\n\n  const handleChangeFilter = (filterValue) =>{\n    dispatch(setFilter(filterValue))\n  };\n\n\n  const filteredContacts = useSelector((state) => state.contacts.filteredContacts);\n\n\n\n\n  return (\n    <div>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onAddContact={handleAddContact} />\n      </div>\n      <div>\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={handleChangeFilter} />\n        <ContactList contacts={filteredContacts} onDeleteContact={handleDeleteContact} />\n      </div>\n    </div>\n  );\n};\n\n\n\nexport default Contacts\n\n/////////////////////////////////////===============================================////////////////////////////////\n// const Contacts = () => {\n//   return(\n//     <div><h1>Contact Page</h1></div>\n//   )\n\n\n// }\n// export default Contacts"],"names":["setFilter","state","contacts","filter","contact","name","toLowerCase","includes","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","dispatch","useDispatch","useState","setName","number","setNumber","handleChange","e","target","value","className","css","onSubmit","preventDefault","trim","newContact","addContact","type","pattern","title","required","onChange","filteredContacts","useSelector","map","onClick","contactId","deleteContact","useEffect","fetchContacts","onAddContact","alert","some","filterValue","onDeleteContact"],"sourceRoot":""}